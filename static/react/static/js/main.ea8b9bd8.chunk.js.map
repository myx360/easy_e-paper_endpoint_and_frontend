{"version":3,"sources":["view/components/Dropzone.jsx","data/actions.js","view/containers/Dropzone.jsx","App.jsx","serviceWorker.js","data/reducers.js","store/rootReducer.js","data/epics.js","store/rootEpic.js","util/http.js","util/index.js","store/store.js","index.js"],"names":["useStyles","makeStyles","theme","dropzone","border","grey","borderRadius","padding","Dropzone","onDropAcceptedCallback","classes","onDrop","useCallback","files","useDropzone","getRootProps","getInputProps","isDragActive","className","Typography","variant","pictureUploadRequest","createAction","pictureUploadSuccess","preview","pictureUploadFailure","err","pictureUploadResetData","pictureUploadResetError","connect","dispatch","file","actions","root","flexGrow","title","App","Grid","container","spacing","direction","alignItems","justify","style","minHeight","item","xs","Card","CardHeader","titleTypographyProps","subheader","subheaderTypographyProps","color","CardContent","Boolean","window","location","hostname","match","initial_state","status","data","error","upload","state","action","type","payload","combineReducers","pictureUpload","combineEpics","action$","state$","requester","pipe","ofType","mergeMap","postImage","result","of","body","image_black","catchError","rootEpic","pictureUploadEpics","path","params","req","request","get","set","map","x","query","send","JSON","stringify","post","attach","put","delete","from","reqr","epics","createEpicMiddleware","dependencies","middleware","applyMiddleware","enhancers","composeWithDevTools","name","shouldCatchErrors","store","createStore","rootReducer","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"sUAQMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,SAAU,CACRC,OAAO,cAAD,OAAgBC,IAAK,MAC3BC,aAAc,EACdC,QAAS,OAyBEC,EArBE,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,uBACZC,EAAUV,IACVW,EAASC,uBAAY,SAACC,GAAD,OAAWJ,EAAuBI,EAAM,MAAK,CAACJ,IAF1B,EAGOK,YAAY,CAACH,WAA3DI,EAHuC,EAGvCA,aAAcC,EAHyB,EAGzBA,cAAeC,EAHU,EAGVA,aAErC,OACE,uCAAKC,UAAWR,EAAQP,UAAcY,KACpC,0BAAWC,KAETC,EACE,kBAACE,EAAA,EAAD,CAAYC,QAAQ,SAApB,2BACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,SAApB,kE,SCnBGC,EAAuBC,YANE,0BAOzBC,EAAuBD,YANE,0BAQpC,SAACE,GAAD,OAAcA,KAEHC,EAAuBH,YATE,0BAWpC,SAACI,GAAD,OAAUA,KAECC,EAAyBL,YAZG,6BAa5BM,EAA0BN,YAZG,8BAc3B,GACbD,uBAAsBE,uBAAsBI,yBAAwBC,2BCZvDC,cAAQ,MAJC,SAACC,GAAD,MAAe,CACrCrB,uBAAwB,SAACsB,GAAD,OAAUD,EAASE,EAAQX,qBAAqBU,QAG3DF,CAA+BrB,GCHxCR,G,MAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+B,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLD,SAAU,QAqCCE,MAjCf,WACE,IAAM1B,EAAUV,IAEhB,OACE,kBAACqC,EAAA,EAAD,CACIC,WAAS,EACTC,QAAS,EACTC,UAAU,SACVC,WAAW,SACXC,QAAQ,SACRC,MAAO,CAAEC,UAAW,UAEtB,kBAACP,EAAA,EAAD,CAAMQ,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CAAM3B,QAAQ,WAAWF,UAAWR,EAAQuB,MAC1C,kBAACe,EAAA,EAAD,CACI9B,UAAWR,EAAQyB,MACnBA,MAAM,kBACNc,qBAAsB,CAAC7B,QAAS,MAChC8B,UAAU,iBACVC,yBAA0B,CACpB/B,QAAS,YACTgC,MAAO,mBAGjB,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,WC5BQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCdOC,EAAgB,CAC3BC,OAAQ,OACRC,KAAM,GACNC,MAAO,IA0BMC,EAvBA,WAAoC,IAAnCC,EAAkC,uDAA1BL,EAAeM,EAAW,uCAChD,OAAQA,EAAOC,MACb,IJVkC,yBIWhC,OAAO,2BAAKF,GAAZ,IAAmBJ,OAAQ,YAC7B,IJXkC,yBIYhC,IAAMC,EAAOI,EAAOE,QACpB,OAAO,2BAAKH,GAAZ,IAAmBJ,OAAQ,OAAQC,SAErC,IJdkC,yBIehC,IAAMC,EAAQG,EAAOE,QACrB,OAAO,2BAAKH,GAAZ,IAAmBJ,OAAQ,OAAQE,UAErC,IJjBqC,4BIkBnC,OAAO,2BAAKE,GAAZ,IAAmBH,KAAM,KAE3B,IJnBsC,6BIoBpC,OAAO,2BAAKG,GAAZ,IAAmBF,MAAO,KAE5B,QACE,OAAOE,IC1BEI,4BAAgB,CAACC,kB,0CCmBjBC,eAdc,SAACC,EAASC,EAAQC,GAAlB,OAAiCF,EAAQG,KACpEC,YNPoC,0BMQpCC,aAAS,SAACX,GAAD,OAAYQ,EAAUI,UAAU,wBAAyBZ,EAAOE,SAASO,KAChFE,aAAS,SAACE,GAAD,OAAYC,YACnBxD,EAAqB,CAAEuD,OAAQA,EAAOE,KAAMC,YAAahB,EAAOE,UAChEvC,QAEFsD,aAAW,SAACpB,GAAD,OAAWiB,YACpBtD,EAAqBqC,GACrBnC,gBCZSwD,EAFEb,YAAac,G,iBCDjBX,EACN,SAACY,EAAMxB,GAAuB,IAAjByB,EAAgB,uDAAP,GAEnBC,EAAMC,IACTC,IADS,eACGJ,IACZK,IAAI,eAAgB,oBAKvB,OAHAJ,EAAOK,KAAI,SAACC,GAAD,OAAOL,EAAIM,MAAMD,MAE5BL,EAAIO,KAAKC,KAAKC,UAAUnC,IACjB0B,GAVEd,EAYL,SAACY,EAAMxB,GAAP,OAAgB2B,IACnBS,KADmB,eACNZ,IACbK,IAAI,eAAgB,oBACpBI,KAAKC,KAAKC,UAAUnC,KAfZY,EAgBA,SAACY,EAAMJ,GAAP,OAAuBO,IAC/BS,KAD+B,eAClBZ,IACba,OAAO,cAAejB,IAlBdR,EAmBN,SAACY,EAAMxB,GAAP,OAAgB2B,IAClBW,IADkB,eACNd,IACZK,IAAI,eAAgB,oBACpBI,KAAKC,KAAKC,UAAUnC,KAtBZY,EAuBH,SAACY,EAAMxB,GAAP,OAAgB2B,IACrBY,OADqB,eACNf,IACfK,IAAI,eAAgB,oBACpBI,KAAKC,KAAKC,UAAUnC,K,QCzBZY,EAAY,CACvBgB,IAAK,SAACJ,EAAMxB,EAAMyB,GAAb,OAAwBe,YAAKC,EAASjB,EAAMxB,EAAMyB,KACvDW,KAAM,SAACZ,EAAMxB,GAAP,OAAgBwC,YAAKC,EAAUjB,EAAMxB,KAC3CgB,UAAW,SAACQ,EAAMtD,GAAP,OAAgBsE,YAAKC,EAAejB,EAAMtD,KACrDoE,IAAK,SAACd,EAAMxB,GAAP,OAAgBwC,YAAKC,EAASjB,EAAMxB,KACzCuC,OAAQ,SAACf,EAAMxB,GAAP,OAAgBwC,YAAKC,EAAYjB,EAAMxB,M,iBCA3C0C,EAAQC,YAAqB,CACjCC,aAAchC,IAEViC,EAAaC,0BAAgBJ,GAM7BK,EAAYC,8BAJM,CACtBC,KAAM,qBACNC,mBAAmB,GAEHF,CAAqCH,GAEjDM,GAAQC,sBAAYC,EAAaN,GAEvCL,EAAMY,IAAIhC,GCbViC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,IACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SRuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhE,GACLiE,QAAQjE,MAAMA,EAAMkE,c","file":"static/js/main.ea8b9bd8.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\nimport { useDropzone } from 'react-dropzone'\nimport { func } from 'prop-types';\n\n \nconst useStyles = makeStyles(theme => ({\n  dropzone: {\n    border: `dashed 3px ${grey[400]}`,\n    borderRadius: 5,\n    padding: 5,\n  }\n}));\n\nconst Dropzone = ({ onDropAcceptedCallback }) => {\n  const classes = useStyles();\n  const onDrop = useCallback((files) => onDropAcceptedCallback(files[0]), [onDropAcceptedCallback])\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({onDrop})\n \n  return (\n    <div className={classes.dropzone} {...getRootProps()}>\n      <input {...getInputProps()} />\n      {\n        isDragActive ?\n          <Typography variant=\"body1\">Drop the files here ...</Typography> :\n          <Typography variant=\"body1\">Drag 'n' drop your image here, or click to open file-browser</Typography>\n      }\n    </div>\n  )\n}\n\nDropzone.propTypes = {\n  onDropAcceptedCallback: func.isRequired\n};\n\nexport default Dropzone;","import { createAction } from 'redux-actions';\n\nexport const PICTURE_UPLOAD_REQUEST = 'PICTURE_UPLOAD_REQUEST';\nexport const PICTURE_UPLOAD_SUCCESS = 'PICTURE_UPLOAD_SUCCESS';\nexport const PICTURE_UPLOAD_FAILURE = 'PICTURE_UPLOAD_FAILURE';\nexport const PICTURE_UPLOAD_RESET_DATA = 'PICTURE_UPLOAD_RESET_DATA';\nexport const PICTURE_UPLOAD_RESET_ERROR = 'PICTURE_UPLOAD_RESET_ERROR';\n\nexport const pictureUploadRequest = createAction(PICTURE_UPLOAD_REQUEST);\nexport const pictureUploadSuccess = createAction(\n  PICTURE_UPLOAD_SUCCESS,\n  (preview) => (preview)\n);\nexport const pictureUploadFailure = createAction(\n  PICTURE_UPLOAD_FAILURE,\n  (err) => (err)\n);\nexport const pictureUploadResetData = createAction(PICTURE_UPLOAD_RESET_DATA);\nexport const pictureUploadResetError = createAction(PICTURE_UPLOAD_RESET_ERROR);\n\nexport default {\n  pictureUploadRequest, pictureUploadSuccess, pictureUploadResetData, pictureUploadResetError\n};","import { connect } from 'react-redux';\nimport Dropzone from '../components/Dropzone';\nimport actions from '../../data/actions';\n\n\nconst dispatchToProps = (dispatch) => ({\n  onDropAcceptedCallback: (file) => dispatch(actions.pictureUploadRequest(file)),\n});\n\nexport default connect(null, dispatchToProps)(Dropzone);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardHeader, CardContent, Grid } from '@material-ui/core';\nimport Dropzone from './view/containers/Dropzone';\nimport './App.css';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <Grid\n        container\n        spacing={1}\n        direction=\"column\"\n        alignItems=\"center\"\n        justify=\"center\"\n        style={{ minHeight: '100vh' }}>\n\n      <Grid item xs={8}>\n        <Card variant='outlined' className={classes.root}>\n          <CardHeader\n              className={classes.title}\n              title='E-paper Display'\n              titleTypographyProps={{variant: 'h3'}}\n              subheader='Picture Upload'\n              subheaderTypographyProps={{\n                    variant: 'subtitle1',\n                    color: 'textSecondary'\n                  }}\n          />\n          <CardContent>\n            <Dropzone />\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n PICTURE_UPLOAD_REQUEST, PICTURE_UPLOAD_SUCCESS, PICTURE_UPLOAD_FAILURE, PICTURE_UPLOAD_RESET_DATA, PICTURE_UPLOAD_RESET_ERROR\n} from './actions';\n\nexport const initial_state = {\n  status: 'idle',\n  data: {},\n  error: {},\n};\n\nconst upload = (state = initial_state, action) => {\n  switch (action.type) {\n    case PICTURE_UPLOAD_REQUEST:\n      return { ...state, status: 'running' };\n    case PICTURE_UPLOAD_SUCCESS: {\n      const data = action.payload;\n      return { ...state, status: 'idle', data };\n    }\n    case PICTURE_UPLOAD_FAILURE: {\n      const error = action.payload;\n      return { ...state, status: 'idle', error };\n    }\n    case PICTURE_UPLOAD_RESET_DATA: {\n      return { ...state, data: {} };\n    }\n    case PICTURE_UPLOAD_RESET_ERROR: {\n      return { ...state, error: {} };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default upload;","import { default as pictureUpload } from '../data/reducers';\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({pictureUpload});","import { of } from 'rxjs';\nimport { mergeMap, catchError } from 'rxjs/operators';\nimport { ofType, combineEpics } from 'redux-observable';\n\nimport {\n  PICTURE_UPLOAD_REQUEST, pictureUploadSuccess, pictureUploadResetError, pictureUploadFailure, pictureUploadResetData\n} from './actions';\n\nexport const pictureUpload = (action$, state$, requester ) => action$.pipe(\n  ofType(PICTURE_UPLOAD_REQUEST),\n  mergeMap((action) => requester.postImage('picture/display_image', action.payload).pipe(\n    mergeMap((result) => of(\n      pictureUploadSuccess({ result: result.body, image_black: action.payload }),\n      pictureUploadResetError(),\n    )),\n    catchError((error) => of(\n      pictureUploadFailure(error),\n      pictureUploadResetData(),\n    )),\n  )),\n);\n\nexport default combineEpics(pictureUpload);","import { default as pictureUploadEpics } from '../data/epics';\nimport { combineEpics } from 'redux-observable';\n\nconst rootEpic = combineEpics(pictureUploadEpics);\n\nexport default rootEpic;\n","import request from 'superagent';\n\nexport const requester = {\n  get: (path, data, params = []) => {\n    // path and headers\n    const req = request\n      .get(`/api/${path}`)\n      .set('Content-Type', 'application/json');\n    // query params\n    params.map((x) => req.query(x));\n    // data\n    req.send(JSON.stringify(data));\n    return req;\n  },\n  post: (path, data) => request\n    .post(`/api/${path}`)\n    .set('Content-Type', 'application/json')\n    .send(JSON.stringify(data)),\n  postImage: (path, image_black) => request\n    .post(`/api/${path}`)\n    .attach('image_black', image_black),\n  put: (path, data) => request\n    .put(`/api/${path}`)\n    .set('Content-Type', 'application/json')\n    .send(JSON.stringify(data)),\n  delete: (path, data) => request\n    .delete(`/api/${path}`)\n    .set('Content-Type', 'application/json')\n    .send(JSON.stringify(data))\n};\n","import { requester as reqr } from './http';\nimport { from } from 'rxjs';\n\nexport const requester = {\n  get: (path, data, params) => from(reqr.get(path, data, params)),\n  post: (path, data) => from(reqr.post(path, data)),\n  postImage: (path, file) => from(reqr.postImage(path, file)),\n  put: (path, data) => from(reqr.put(path, data)),\n  delete: (path, data) => from(reqr.delete(path, data))\n}","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './rootReducer';\nimport rootEpic from './rootEpic';\nimport { requester } from '../util'\nimport { createEpicMiddleware } from 'redux-observable';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\nconst epics = createEpicMiddleware({\n  dependencies: requester\n});\nconst middleware = applyMiddleware(epics);\n\nconst devToolsOptions = {\n  name: 'Epaper Display App',\n  shouldCatchErrors: true,\n};\nconst enhancers = composeWithDevTools(devToolsOptions)(middleware);\n\nconst store = createStore(rootReducer, enhancers);\n\nepics.run(rootEpic);\n\nexport { store };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}